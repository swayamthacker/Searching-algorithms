#include <iostream>
using namespace std;
const int size = 8;

struct nodex
{
int x;
nodex* nextptr;
};

class Queue
{
private:
nodex* head;
nodex* tail;
public:
Queue();
~Queue();
void enqueue(int);
int dequeue();
bool isempty();
void display();
};

Queue::Queue()
{
    head = NULL;
    tail = NULL;
}

Queue::~Queue()
{
    delete head;
}

void Queue::enqueue(int element)
{
nodex* pointer;
pointer = new nodex;
pointer->x = element;

if(head==NULL)
{
    head = pointer;
    tail = pointer;
    tail->nextptr = 0;
}
else
{
    tail->nextptr = pointer;
    tail = pointer;
    tail->nextptr = 0;
}
}

int Queue::dequeue()
{
    int value = 0;
if(head==NULL)
{
    cout<<"The queue is empty"<<endl;
    return value;
}
else
{
    nodex* temp = head;
    value = temp->x;
    head = head->nextptr;
    delete temp;
}
return value;
}

bool Queue::isempty()
{
    return (head==NULL);
}

void Queue::display()
{
    if(head==NULL)
    {
        cout<<"The queue is empty"<<endl;
    }
    else
    {
        nodex* traverse = head;
        while(traverse!=NULL)
        {
            cout<<traverse->x<<" "<<endl;
            traverse = traverse->nextptr;
        }
    }
}


struct node{
int x;
node* nextptr;
};

class Graph
{
private:
node** table;

public:
Graph();
~Graph();
void initialize();
void addvertex(int,int);
void display(int);
void bfs(int);
};

Graph::Graph()
{

table  = new node*[size];
for(int i=0;i<size;i++)
{
    table[i] = 0;

}
}

Graph::~Graph()
{
for(int i = 0;i<size;i++)
{
if(table[i]!=NULL)
{
    node* preventry = 0;
    node* entry = table[i];
    while(entry!=NULL)
    {
    preventry = entry;
    entry = entry->nextptr;
    delete preventry;
    }
}
}
delete [] table;
}

void Graph::initialize()
{
for(int i =0;i<size;i++) 
{
    table[i] = new node;
    table[i]->x = i;
    table[i]->nextptr = 0;
}

}

void Graph::addvertex(int location,int vertex)
{
node* pointer;
node* currentptr;

pointer  = new node;
pointer->x = vertex;

node* head = table[location];
currentptr = head;

while(currentptr->nextptr!=NULL)
{
    currentptr = currentptr->nextptr;
}
currentptr->nextptr = pointer;
currentptr = pointer;
currentptr->nextptr = 0;
}

void Graph:: display(int location)
{
node* traverseptr = table[location];
while(traverseptr->nextptr!=NULL)
{
    cout<<traverseptr->x<<" ";
    traverseptr = traverseptr->nextptr;
}
cout<<traverseptr->x<<endl;
}

void Graph:: bfs(int target)
{
    Queue Q;
    bool *visited;
    visited = new bool[size];

    for(int i = 0;i<size;i++)
    {
        visited[i] = false;
    }

    node* storeptr = table[1];
    int s = storeptr->x;
    if(s == target)
    {
        cout<<"Found the target "<<s<<endl;
        return;
    }
    Q.enqueue(s);
    visited[s] = true;
    cout << "BFS from vertex "<<s<<" :"<<endl;
    while(!Q.isempty())
    {
        int m = Q.dequeue();
        cout<<m<<" ";
        if(m == target)
        {
            cout<<endl<<"Reached target "<<m<<endl;
            return;
        }
        
        node* traverseptr = table[m];

        while(traverseptr->nextptr!=0)
        {
            traverseptr = traverseptr->nextptr;
            int j = traverseptr->x;

            if(!visited[j])
            {
               Q.enqueue(j);
               visited[j] = true;
            }
        }
     }
}

int main()
{
Graph g;
g.initialize();
g.addvertex(1,2);
g.addvertex(1,3);
g.addvertex(2,1);
g.addvertex(2,4);
g.addvertex(3,1);
g.addvertex(3,4);
g.addvertex(3,6);
g.addvertex(4,2);
g.addvertex(4,3);
g.addvertex(4,7);
g.addvertex(5,6);
g.addvertex(5,7);
g.addvertex(6,3);
g.addvertex(6,5);
g.addvertex(7,4);
g.addvertex(7,5);
//g.addvertex(1,4);
//g.addvertex(4,1);

//g.addvertex(4,8);
//g.addvertex(8,4);
//g.addvertex(1,12);
/*g.addvertex(4,2);
g.addvertex(4,3);
g.addvertex(4,7);
g.addvertex(5,6);
g.addvertex(5,7);
g.addvertex(6,5);
g.addvertex(7,4);
g.addvertex(7,5);*/

cout<<endl<<endl;

for(int i =0;i<size;i++)
{
    g.display(i);
}
g.bfs(15);

return 0;
}
